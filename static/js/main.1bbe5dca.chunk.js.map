{"version":3,"sources":["reducers/book.reducer.js","reducers/index.js","store/index.js","components/navbar.component.js","components/book-details.component.js","components/book-list.component.js","components/book-form.component.js","components/app.js","serviceWorker.js","index.js"],"names":["initialState","books","bookId","loading","deleting","appReducer","combineReducers","state","type","payload","filter","book","id","rootReducer","action","middlewares","createLogger","collapsed","getState","logEntry","error","thunkMiddleware","reduxMiddleware","f","NavbarComponent","useSelector","className","length","BookDetailsComponent","dispatch","useDispatch","onClick","setTimeout","title","author","BookListComponent","shallowEqual","useEffect","localData","sessionStorage","getItem","JSON","parse","setItem","stringify","map","key","BookFormComponent","formik","useFormik","initialValues","validationSchema","Yup","required","onSubmit","values","uuidv4","resetForm","handleSubmit","htmlFor","name","getFieldProps","touched","errors","value","App","Boolean","window","location","hostname","match","store","preloadedState","enhancers","applyMiddleware","composedEnhancers","compose","createStore","configureStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.1bbe5dca.chunk.js","sourcesContent":["const initialState = {\r\n  books: [],\r\n  bookId: \"\",\r\n  loading: false,\r\n  deleting: false\r\n};\r\n\r\nexport const bookReducer = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case \"GET_BOOKS\":\r\n      return { ...state, books: [...state.books, ...payload], loading: false };\r\n    case \"ADD_BOOK\":\r\n      return { ...state, books: [...state.books, payload], loading: false };\r\n    case \"REMOVE_BOOK\":\r\n      return {\r\n        ...state,\r\n        books: [...state.books.filter(book => book.id !== payload)],\r\n        deleting: false\r\n      };\r\n    case \"LOAD_BOOK\":\r\n      return {\r\n        ...state,\r\n        bookId: payload,\r\n        deleting: payload ? true : false,\r\n        loading: !payload ? true : false\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport { bookReducer } from \"./book.reducer\";\r\n\r\nconst appReducer = combineReducers({\r\n  books: bookReducer\r\n});\r\n\r\nconst rootReducer = (state, action) => {\r\n  return appReducer(state, action);\r\n};\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport rootReducer from \"../reducers\";\r\n\r\n// log middleware\r\nconst loggerMiddleware = createLogger({\r\n  collapsed: (getState, action, logEntry) => !logEntry.error\r\n});\r\n\r\n// thunk middleware\r\nlet middlewares = [thunkMiddleware];\r\n// log for development only\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  middlewares = [...middlewares, loggerMiddleware];\r\n}\r\n\r\n// redux dev tool middleware\r\nconst reduxMiddleware =\r\n  process.env.NODE_ENV !== \"production\" && window.__REDUX_DEVTOOLS_EXTENSION__\r\n    ? window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    : f => f;\r\n\r\n// configure store\r\nexport const configureStore = preloadedState => {\r\n  const middlewareEnhancer = applyMiddleware(...middlewares);\r\n  const enhancers = [middlewareEnhancer, reduxMiddleware];\r\n  const composedEnhancers = compose(...enhancers);\r\n  const store = createStore(rootReducer, preloadedState, composedEnhancers);\r\n  return store;\r\n};\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst NavbarComponent = () => {\r\n  const { books } = useSelector(state => state.books);\r\n  return (\r\n    <div className=\"navbar\">\r\n      <h1>Ninja Reading List</h1>\r\n      <p>Currently you have {books.length} books to get through...</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavbarComponent;\r\n","import React, { Fragment } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nconst BookDetailsComponent = ({ book }) => {\r\n  const { bookId, deleting } = useSelector(state => state.books);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <li\r\n      onClick={() => {\r\n        dispatch({ type: \"LOAD_BOOK\", payload: book.id });\r\n        setTimeout(() => dispatch({ type: \"REMOVE_BOOK\", payload: book.id }), 2000);\r\n      }}\r\n    >\r\n      <Fragment>\r\n        <div className=\"id\">{book.id}</div>\r\n        <div className=\"title\">{book.title}</div>\r\n        <div className=\"author\">{book.author}</div>\r\n        <div>{deleting && book.id === bookId ? <p>Deleting...</p> : \"\"}</div>\r\n      </Fragment>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default BookDetailsComponent;\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, shallowEqual, useDispatch } from \"react-redux\";\r\nimport BookDetailsComponent from \"./book-details.component\";\r\n\r\nconst BookListComponent = () => {\r\n  const { books } = useSelector(state => state.books, shallowEqual);\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch({ type: \"LOAD_BOOK\" });\r\n    const localData = sessionStorage.getItem(\"books\");\r\n    setTimeout(\r\n      () =>\r\n        dispatch({\r\n          type: \"GET_BOOKS\",\r\n          payload: localData ? JSON.parse(localData) : []\r\n        }),\r\n      2000\r\n    );\r\n  }, [dispatch]);\r\n  useEffect(() => {\r\n    sessionStorage.setItem(\"books\", JSON.stringify(books));\r\n  }, [books]);\r\n  return books.length ? (\r\n    <div className=\"book-list\">\r\n      <ul>\r\n        {books.map(book => {\r\n          return <BookDetailsComponent book={book} key={book.id} />;\r\n        })}\r\n      </ul>\r\n    </div>\r\n  ) : (\r\n    <div className=\"empty\">No books to read. Hello free name :)</div>\r\n  );\r\n};\r\n\r\nexport default BookListComponent;\r\n","import React from \"react\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nconst BookFormComponent = () => {\r\n  const { loading } = useSelector(state => state.books);\r\n  const dispatch = useDispatch();\r\n  const formik = useFormik({\r\n    initialValues: { title: \"\", author: \"\" },\r\n    validationSchema: Yup.object({\r\n      title: Yup.string().required(\"Required\"),\r\n      author: Yup.string().required(\"Required\")\r\n    }),\r\n    onSubmit: values => {\r\n      const { title, author } = values;\r\n      dispatch({ type: \"LOAD_BOOK\" });\r\n      setTimeout(() => {\r\n        dispatch({ type: \"ADD_BOOK\", payload: { title, author, id: uuidv4() } });\r\n        formik.resetForm();\r\n      }, 2000);\r\n    }\r\n  });\r\n  return (\r\n    <form className=\"form\" onSubmit={formik.handleSubmit}>\r\n      <label htmlFor=\"title\">Title</label>\r\n      <input name=\"title\" type=\"text\" {...formik.getFieldProps(\"title\")} />\r\n      {formik.touched.title && formik.errors.title ? <div>{formik.errors.title}</div> : null}\r\n      <label htmlFor=\"author\">Author</label>\r\n      <input name=\"author\" type=\"text\" {...formik.getFieldProps(\"author\")} />\r\n      {formik.touched.author && formik.errors.author ? <div>{formik.errors.author}</div> : null}\r\n      <input type=\"submit\" value={loading ? \"Loading...\" : \"Submit\"} />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default BookFormComponent;\r\n","import React from \"react\";\r\nimport NavbarComponent from \"./navbar.component\";\r\nimport BookListComponent from \"./book-list.component\";\r\nimport BookFormComponent from \"./book-form.component\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <NavbarComponent></NavbarComponent>\r\n      <BookListComponent></BookListComponent>\r\n      <BookFormComponent></BookFormComponent>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { configureStore } from \"./store\";\nimport \"./index.css\";\nimport App from \"./components/app\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}